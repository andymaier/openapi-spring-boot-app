/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.model.Article;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-12-01T13:09:57.424Z[GMT]")
public interface ArticlesApi {

    @Operation(summary = "Deletes the Article", description = "Deletes the Article", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(value = "/articles/{aid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> articlesAidDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid);


    @Operation(summary = "Get the detailed information of an article", description = "asdasd", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = Article.class))) })
    @RequestMapping(value = "/articles/{aid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Article> articlesAidGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid);


    @Operation(summary = "Patch an existing article.", description = "", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Article Updated", content = @Content(schema = @Schema(implementation = Article.class))) })
    @RequestMapping(value = "/articles/{aid}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Article> articlesAidPatch(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid, @Parameter(in = ParameterIn.DEFAULT, description = "Update Article attribute.", required=true, schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "Update an existing article or create a new article.", description = "", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Artikel erzeugt oder aktualisiert.", content = @Content(schema = @Schema(implementation = Article.class))) })
    @RequestMapping(value = "/articles/{aid}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Article> articlesAidPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existing article or create a new article.", required=true, schema=@Schema()) @Valid @RequestBody Article body);


    @Operation(summary = "Get all articles", description = "This endpoint delivers the created articles on the server.", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Article.class)))) })
    @RequestMapping(value = "/articles/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Article>> articlesGet();


    @Operation(summary = "Get all articles", description = "This endpoint delivers the created articles on the server. =======  Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  - Das passiert! - Das ist nicht nowendig   - weil1   - weil2   - Ã¼berhaupt nicht - Bitte nicht weiter kommunzieren weil gegen Richtlinie   [![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/5jQSat1cKMo/0.jpg)](https://www.youtube.com/watch?v=5jQSat1cKMo)  Ein Architekturbild:  ![alt text](https://medtech-ingenieur.de/wp-content/uploads/2015/03/blockdiagram.png \"Logo Title Text 1\")  [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") ", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(schema = @Schema(implementation = Article.class))) })
    @RequestMapping(value = "/articles/",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Article> articlesPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Article body);

}

